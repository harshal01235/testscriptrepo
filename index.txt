/*
 * Copyright 2021 WPPConnect Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { defaultLogger } from '@wppconnect-team/wppconnect';
import cors, { CorsOptions } from 'cors';
import dotenv from 'dotenv';
import express, { Express, NextFunction, Router } from 'express';
import boolParser from 'express-query-boolean';
import { createServer } from 'http';
import mergeDeep from 'merge-deep';
import process from 'process';
import { Server as Socket } from 'socket.io';
import { Logger } from 'winston';

import { version } from '../package.json';
import config from './config';
import { convert } from './mapper/index';
import routes from './routes';
import { ServerOptions } from './types/ServerOptions';
import {
  createFolders,
  setMaxListners,
  startAllSessions
} from './util/functions';
import { createLogger } from './util/logger';

dotenv.config();

export const logger = createLogger(config.log);

export function initServer(serverOptions: Partial<ServerOptions>): {
  app: Express;
  routes: Router;
  logger: Logger;
} {
  if (typeof serverOptions !== 'object') {
    serverOptions = {};
  }

  serverOptions = mergeDeep({}, config, serverOptions);
  defaultLogger.level = serverOptions?.log?.level
    ? serverOptions.log.level
    : 'silly';

  setMaxListners(serverOptions as ServerOptions);

  const app = express();
  const PORT = process.env.PORT || serverOptions.port;

  const allowedOrigins = [
    'https://admin.socket.io',
    'https://fastsend.in',
    'https://fast-send.vercel.app',
    'https://fastsend-server.onrender.com'
  ];
  if (process.env.NODE_ENV === 'development') {
    allowedOrigins.push('http://localhost:3000', `http://localhost:${PORT}`);
  }
  const corsOptions: CorsOptions = {
    origin: function (
      origin: string | undefined,
      callback: (err: Error | null, allow?: boolean) => void
    ) {
      if (!origin || allowedOrigins.includes(origin)) {
        callback(null, true);
      } else {
        callback(new Error('Not allowed by CORS'));
      }
    },
    methods: ['GET', 'POST', 'HEAD', 'PUT', 'PATCH', 'DELETE'],
    allowedHeaders: [
      'Origin',
      'X-Requested-With',
      'Content-Type',
      'Accept',
      'Authorization'
    ]
  };

  app.use((req, res, next) => {
    res.header('Access-Control-Allow-Credentials', 'true');
    next();
  });

  app.use(cors(corsOptions));
  app.use(express.json({ limit: process.env.EXPRESS_FILE_LIMIT }));
  app.use(
    express.urlencoded({
      limit: process.env.EXPRESS_FILE_LIMIT,
      extended: true
    })
  );
  app.use('/files', express.static('WhatsAppImages'));
  app.use(boolParser());

  if (config?.aws_s3?.access_key_id && config?.aws_s3?.secret_key) {
    process.env['AWS_ACCESS_KEY_ID'] = config.aws_s3.access_key_id;
    process.env['AWS_SECRET_ACCESS_KEY'] = config.aws_s3.secret_key;
  }

  // Add request options
  app.use((req: any, res: any, next: NextFunction) => {
    req.serverOptions = serverOptions;
    req.logger = logger;
    req.io = io as any;

    const oldSend = res.send;

    res.send = async function (data: any) {
      const content = req.headers['content-type'];
      if (content == 'application/json') {
        data = JSON.parse(data);
        if (!data.session) data.session = req.client ? req.client.session : '';
        if (data.mapper && req.serverOptions.mapper.enable) {
          data.response = await convert(
            req.serverOptions.mapper.prefix,
            data.response,
            data.mapper
          );
          delete data.mapper;
        }
      }
      res.send = oldSend;
      return res.send(data);
    };
    next();
  });
  app.get('/', (req, res) => {
    res.send('Welcome to Fastsend');
  });
  app.use(routes);

  createFolders();
  const http = createServer(app);
  const io = new Socket(http, {
    cors: {
      origin: allowedOrigins,
      methods: ['GET', 'POST', 'HEAD', 'PUT', 'PATCH', 'DELETE'],
      allowedHeaders: [
        'Origin',
        'X-Requested-With',
        'Content-Type',
        'Accept',
        'Authorization'
      ]
    },
    maxHttpBufferSize: 50 * 1024 * 1024 // 50 MB
  });

  io.on('connection', (socket) => {
    logger.info(`âœ… ${socket.id} connected to socket IO`);
    socket.on('disconnect', () => {
      logger.info(`ðŸ’¥ ${socket.id} disconnected from socket IO`);
    });
  });

  http.listen(PORT, () => {
    logger.info(
      `Server is running on ${
        process.env.NODE_ENV === 'development'
          ? `${serverOptions.host}:${PORT}`
          : `${serverOptions.host}`
      }`
    );
    logger.info(
      `Visit ${
        process.env.NODE_ENV === 'development'
          ? `${serverOptions.host}:${PORT}/api-docs`
          : `${serverOptions.host}/api-docs`
      } for Swagger docs`
    );
    logger.info(`${config.deviceName} version: ${version}`);

    if (serverOptions.startAllSession) startAllSessions(serverOptions, logger);
  });

  if (config.log.level === 'error' || config.log.level === 'warn') {
    console.log(`\x1b[33m ======================================================
Attention:
Your configuration is configured to show only a few logs, before opening an issue, 
please set the log to 'silly', copy the log that shows the error and open your issue.
======================================================
`);
  }

  return {
    app,
    routes,
    logger
  };
}
